
#Otto cycle simmulator
import math
import matplotlib.pyplot as py
import numpy

def engine_kinematics(bore,stroke,con_rod,cr,start_angle,end_angle):
    #engine parameters
	a=stroke/2
	R=con_rod/a

	#volume computation
	v_s=(math.pi/4)*pow(bore,2)*stroke
	v_c=v_s/(cr-1)

	sc=math.radians(start_angle)
	ec=math.radians(end_angle)
    
	num_values=50
	dtheta=(sc-ec) / (num_values - 1)
    

    #volume trace
	v=[]
	for i in range(0,num_values):
		theta=sc+(i*dtheta)
		term1=0.5*(cr-1)
		term2=R+1-math.cos(theta)
		term3=pow(R,2)-pow(math.sin(theta),2)
		term3=pow(term3,0.5)
		v.append((1+term1*(term2-term3))*v_c)
	return (v)
#inputs
p1=101325
t1=500
gamma=1.4
t3=2300

#engine parameters
bore=0.1
stroke=0.1
con_rod=0.15
cr=8

#volume computation
v_s=(math.pi/4)*pow(bore,2)*stroke
v_c=v_s/(cr-1)
v1=v_s + v_c

#stage2
v2=v_c
p2=p1*pow(v1,gamma)/pow(v2,gamma)
rhs=p1*v1/t1
t2=p2*v2/rhs
 

v_compression=engine_kinematics(bore,stroke,con_rod,cr,180,0)

constant=p1*pow(v1,gamma)
p_compression=[]
for v in v_compression:
    p_compression.append(constant/pow(v,gamma))
#stage3
v3=v2
rhs=p2*v2/t2
p3=rhs*t3/v3

v_expansion=engine_kinematics(bore,stroke,con_rod,cr,0,180)
constant=p3*pow(v3,gamma)

p_expansion=[]
for v in v_expansion:
	p_expansion.append(constant/pow(v,gamma))

#stage4
v4=v1
p4=p3*pow(v3,gamma)/pow(v4,gamma)
t4=p4*v4/rhs

#thermal efficiency 
n=(1-(1/pow(cr,(gamma-1))))*100
print('Thermal efficiency of Otto cycle=',n,'%')

py.plot([v2,v3],[p2,p3])
py.plot(v_compression,p_compression)
py.plot(v_expansion,p_expansion)
py.plot([v4,v1],[p4,p1])
py.title('AIR STANDARD OTTO CYCLE')
py.xlabel('VOLUME')
py.show()
